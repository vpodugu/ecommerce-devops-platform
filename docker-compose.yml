
services:
  # ========================================
  # DATABASE SERVICES
  # ========================================
  
  user_db:
    image: mysql:8.0
    container_name: ecommerce_user_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: user_service
      MYSQL_USER: user_service
      MYSQL_PASSWORD: user_service_pass
    ports:
      - "3306:3306"
    volumes:
      - user_db_data:/var/lib/mysql
      - ./services/user-service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 30s
      timeout: 10s
      retries: 3

  product_db:
    image: mysql:8.0
    container_name: ecommerce_product_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: product_service
      MYSQL_USER: product_service
      MYSQL_PASSWORD: product_service_pass
    ports:
      - "3307:3306"
    volumes:
      - product_db_data:/var/lib/mysql
      - ./services/product-service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 30s
      timeout: 10s
      retries: 3

  order_db:
    image: mysql:8.0
    container_name: ecommerce_order_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: order_service
      MYSQL_USER: order_service
      MYSQL_PASSWORD: order_service_pass
    ports:
      - "3308:3306"
    volumes:
      - order_db_data:/var/lib/mysql
      - ./services/order-service/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # MICROSERVICES
  # ========================================

  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: ecommerce_user_service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: user_db
      DB_PORT: 3306
      DB_NAME: user_service
      DB_USER: user_service
      DB_PASSWORD: user_service_pass
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      user_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    container_name: ecommerce_product_service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: production
      PORT: 3002
      DB_HOST: product_db
      DB_PORT: 3306
      DB_NAME: product_service
      DB_USER: product_service
      DB_PASSWORD: product_service_pass
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      product_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: ecommerce_order_service
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: production
      PORT: 3003
      DB_HOST: order_db
      DB_PORT: 3306
      DB_NAME: order_service
      DB_USER: order_service
      DB_PASSWORD: order_service_pass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      USER_SERVICE_URL: http://user-service:3001
      PRODUCT_SERVICE_URL: http://product-service:3002
    depends_on:
      order_db:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: ecommerce_api_gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      NODE_ENV: production
      PORT: 8080
      USER_SERVICE_URL: http://user-service:3001
      PRODUCT_SERVICE_URL: http://product-service:3002
      ORDER_SERVICE_URL: http://order-service:3003
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    depends_on:
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # FRONTEND
  # ========================================

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ecommerce_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      REACT_APP_API_URL: http://localhost:8080
      REACT_APP_ENVIRONMENT: development
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # MONITORING STACK (Optional)
  # ========================================

  prometheus:
    image: prom/prometheus:latest
    container_name: ecommerce_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ecommerce-network

  grafana:
    image: grafana/grafana:latest
    container_name: ecommerce_grafana
    restart: unless-stopped
    ports:
      - "3004:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ecommerce-network

volumes:
  user_db_data:
    driver: local
  product_db_data:
    driver: local
  order_db_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
